#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_tor_bootstrap() {
   while true; do
      check_tor_bootstrap_init

      check_tor_bootstrap_known_failure_cases || break || return 0
      check_tor_bootstrap_unknown_failure_cases || break || return 0
      check_tor_bootstrap_stop_when_bootstrap_done || break || return 0

      check_tor_bootstrap_show_wait_notification_maybe

      check_tor_bootstrap_wait_longer_maybe || continue || return 0
      check_tor_bootstrap_give_up_maybe || break || return 0

      check_tor_bootstrap_script_error || break || return 0

      break
   done
}

check_tor_bootstrap_init() {
   ## sets: check_bootstrap_script
   ## sets: lastpid
   ## sets: TOR_BOOTSTRAP_TIME_START
   ## sets: TOR_BOOTSTRAP_TIME_NOW
   ## sets: TOR_BOOTSTRAP_TIME_PASSED
   ## sets: tor_bootstrap_percent
   ## sets: tor_bootstrap_status
   ## sets: tor_bootstrap_timeout_type
   ## sets: tor_circuit_established
   ## sets: tor_circuit_established_check_exit_code
   ## sets: tor_circuit_established_word
   source /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh

   if [ "$vm_lower_case_short" = "gateway" ]; then
      check_tor_bootstrap_status
   fi

   check_tor_circuit_established

   true "tor_bootstrap_percent: $tor_bootstrap_percent"
   true "tor_bootstrap_status: $tor_bootstrap_status"
   true "tor_circuit_established: $tor_circuit_established"
   true "tor_circuit_established_check_exit_code: $tor_circuit_established_check_exit_code"
   true "tor_circuit_established_word: $tor_circuit_established_word"

   ## Debugging.
   ## Simulating cases where tor_bootstrap_percent is 100 while
   ## tor_circuit_established is 0.
   #if [ "$TOR_BOOTSTRAP_TIME_PASSED" -gt "10" ]; then
      #true
   #else
      #tor_circuit_established="0"
   #fi

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   ## check_socks_port_open_test gets set by check_tor_socks_port_reachability,
   ## which runs earlier.

   if [ "$VM" = "Whonix-Workstation" ]; then
      if [ "$tor_circuit_established" = "1" ]; then
         ## On the workstation we do not have access to tor_bootstrap_percent,
         ## so assume it is 100 for code simplification purposes.
         tor_bootstrap_percent="100"
      else
         tor_bootstrap_percent="0"
      fi
   fi

   [ -n "$whonixcheck_tor_bootstrap_wait_max" ] || whonixcheck_tor_bootstrap_wait_max="120"

   if [ -e /var/run/sdwdate/success ]; then
      time_synchronization_status_word="success"
      time_synchronization_status_notification="done"
   elif [ -e /var/run/sdwdate/first_success ]; then
      time_synchronization_status_word="first_success"
      time_synchronization_status_notification="done"
   else
      time_synchronization_status_word="pending"
      time_synchronization_status_notification="not done"
   fi
}

check_tor_bootstrap_known_failure_cases() {
   if [ "$tor_circuit_established_check_exit_code" = "255" ] || [ "$tor_circuit_established_check_exit_code" = "124" ] || [ "$tor_circuit_established_check_exit_code" = "137" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   if [ "$VM" = "Whonix-Gateway" ]; then
      local MSG="<p>Tor Bootstrap Result:
<br></br>Tor's Control Port could not be reached!
<br></br>
<br></br>Please report this Whonix bug!
<br></br>
<br></br>(Technical information:)
<br></br>(tor_circuit_established_check_exit_code: $tor_circuit_established_check_exit_code)
<br></br>(tor_bootstrap_timeout_type: $tor_bootstrap_timeout_type)
<br></br>(tor_bootstrap_status: $tor_bootstrap_status)
<br></br>(check_socks_port_open_test: $check_socks_port_open_test)
<br></br>(Tor Circuit: $tor_circuit_established_word)</p>"
   elif [ "$VM" = "Whonix-Workstation" ]; then
      if [ "$qubes_detected" = "false" ]; then
         local multiple_whonix_ws_msg="<br></br>- If youâ€™re running multiple Whonix-Workstations simultaneously, confirm that separate IP addresses are configured (see <a href=https://www.whonix.org/wiki/Multiple_Whonix-Workstations>https://www.whonix.org/wiki/Multiple_Whonix-Workstations</a>)."
      fi
      local MSG="<p>Tor Bootstrap Result:
<br></br>Tor's Control Port could not be reached!
<br></br>
<br></br>Troubleshooting:
<br></br>- Confirm that Whonix-Gateway is running.
<br></br>- Run <code>whonixcheck</code> on Whonix-Gateway and confirm success.
$multiple_whonix_ws_msg
<br></br>- Rerun <code>whonixcheck</code> here in this Whonix-Workstation.
<br></br>
<br></br>(Technical information:)
<br></br>(tor_circuit_established_check_exit_code: $tor_circuit_established_check_exit_code)
<br></br>(tor_bootstrap_timeout_type: $tor_bootstrap_timeout_type)
<br></br>(tor_bootstrap_status: $tor_bootstrap_status)
<br></br>(check_socks_port_open_test: $check_socks_port_open_test)
<br></br>(Tor Circuit: $tor_circuit_established_word)</p>"
   else
      local MSG="$FUNCNAME: This is neither Whonix-Gateway nor Whonix-Workstation. Please report this Whonix bug!"
   fi
   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
   EXIT_CODE="1"
   ## TODO
   #cleanup "1"
   ## `break` check_tor_bootstrap loop.
   return 1
}

check_tor_bootstrap_unknown_failure_cases() {
   if [ "$tor_circuit_established_check_exit_code" -gt "100" ] || [ "$tor_circuit_established_check_exit_code" -lt "0" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   local MSG="<p>Tor Bootstrap Result:
<br></br>$check_bootstrap_script ERROR:
<br></br>tor_circuit_established_check_exit_code: $tor_circuit_established_check_exit_code
<br></br>(tor_bootstrap_status: $tor_bootstrap_status)
<br></br>(check_socks_port_open_test: $check_socks_port_open_test)
<br></br>(Tor Circuit: $tor_circuit_established_word)
<br></br>Please report this Whonix bug!</p>"
   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
   EXIT_CODE="1"
   ## TODO
   #cleanup "1"
   ## `break` check_tor_bootstrap loop.
   return 1
}

check_tor_bootstrap_stop_when_bootstrap_done() {
   ## For testing.
   #if [ "$TOR_BOOTSTRAP_TIME_PASSED" -lt "10" ]; then
      #tor_bootstrap_percent="$(( 5 + ${#RANDOM} ))"
   #fi

   if [ "$tor_bootstrap_percent" = "100" ] && [ "$tor_circuit_established" = "1" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   if [ "$time_synchronization_status_word" = "first_success" ] || [ "$time_synchronization_status_word" = "success" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   local MSG="<p>Connected to Tor.</p>"
   ## Only attempt to close the progress bar if one was started.
   ## Otherwise this might conflict with the progress bar in 25_autostart.
   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   if [ "$DAEMON" = "1" ]; then
      ## Let's not show a success message every time whonixcheck
      ## successfully finished the Tor bootstrap test.
      ## `break` check_tor_bootstrap loop.
      return 1
   fi
   $output_x ${output_opts[@]} --passivepopupqueuex --passivepopupqueuextitle "$passive_popup_title" --typex "info" --message "$MSG" --done
   $output_cli ${output_opts[@]} --waitmessagecli --typecli "info" --message "$MSG" --done
   ## `break` check_tor_bootstrap loop.
   return 1
}

check_tor_bootstrap_show_wait_notification_maybe() {
   if [ "$TOR_BOOTSTRAP_TIME_PASSED" -lt "1" ]; then
      return 0
   fi

   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      return 0
   fi

   if [ "$tor_bootstrap_in_progress_passive_popup_shown" = "true" ]; then
      return 0
   fi

   if [ "$DAEMON" = "1" ]; then
      ## Daemon mode. Not creating a progress bar.
      return 0
   fi

   ## Not running in daemon mode.

   if [ "$AUTOSTARTED" = "1" ] && [ "$silent" -ge "2" ]; then
      true "AUTOSTARTED is $AUTOSTARTED and silent is $silent. Therefore not creating a progress bar."
      tor_bootstrap_in_progress_passive_popup_shown="true"
      local MSG="<p>Connecting to Tor...</p>"
      $output_x ${output_opts[@]} --passivepopupqueuex --passivepopupqueuextitle "$passive_popup_title" --typex "info" --message "$MSG" --done
      $output_cli ${output_opts[@]} --waitmessagecli --typecli "info" --message "$MSG" --done
      return 0
   fi

   started_tor_bootstrap_progress_bar="1"
   ## Waited for more than 5 seconds.
   progressbaridx="$(cat "/proc/sys/kernel/random/uuid")"
   local MSG="<p>Tor Bootstrap Test: Checking Tor's Bootstrap Status... (Will take up to $whonixcheck_tor_bootstrap_wait_max seconds.)</p>"
   $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --parentpid "$$" --progressbartitlex "$TITLE_X" --message "$MSG" --done
   return 0
}

check_tor_bootstrap_wait_longer_maybe() {
   if [ "$TOR_BOOTSTRAP_TIME_PASSED" -lt "$whonixcheck_tor_bootstrap_wait_max" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi
   if [ "$tor_bootstrap_percent" -lt "100" ] || [ "$tor_circuit_established" = "0" ] || [ "$time_synchronization_status_word" = "pending" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   if [ "$PROGRESS" = "" ]; then
      PROGRESS="5"
   fi
   PROGRESS="$(( $PROGRESS + 1 ))"
   if [ "$PROGRESS" -ge "100" ]; then
      PROGRESS="6"
   fi

   if [ "$TOR_BOOTSTRAP_PERCENT_OLD" = "" ]; then
      TOR_BOOTSTRAP_PERCENT_OLD="$tor_bootstrap_percent"
   fi

   local progress_made_text
   if [ "$TOR_BOOTSTRAP_PERCENT_OLD" = "$tor_bootstrap_percent" ]; then
      ## no progress has been made
      progress_made_text=""
   else
      progress_made_text="Progress has been made. |"
   fi

   if [ "$VM" = "Whonix-Gateway" ]; then
      local MSG="<p>Tor Bootstrap Result: Bootstrapping for $TOR_BOOTSTRAP_TIME_PASSED seconds. | $tor_bootstrap_percent % done. |\
$progress_made_text Tor Circuit: $tor_circuit_established_word. | Tor reports: $tor_bootstrap_status | \
Timesync status: $time_synchronization_status_notification.</p>"
   else
      local MSG="<p>Tor Bootstrap Result: Bootstrapping for $TOR_BOOTSTRAP_TIME_PASSED seconds. | \
Tor Circuit: $tor_circuit_established_word. | Timesync status: $time_synchronization_status_notification.</p>"
   fi

   TOR_BOOTSTRAP_PERCENT_OLD="$tor_bootstrap_percent"

   $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG" --done
   ## Only attempt to close the progress bar if one was started.
   ## Otherwise this might conflict with the progress bar in 25_autostart.
   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "$PROGRESS"
   fi

   sleep "2" &
   lastpid="$!"
   wait "$lastpid" || true

   ## `continue` check_tor_bootstrap loop.
   return 1
}

check_tor_bootstrap_give_up_maybe() {
   if [ "$TOR_BOOTSTRAP_TIME_PASSED" -ge "$whonixcheck_tor_bootstrap_wait_max" ]; then
      true
   else
      ## Keep check_tor_bootstrap loop running
      return 0
   fi

   if [ "$VM" = "Whonix-Gateway" ]; then
      check_anondate_do
      ## sets: anondate_issue
      ## sets: anondate_recommendation
      ## sets: anondate_debugging_information

      local MSG="<p>Tor Bootstrap Result:
<br></br><b>Whonixcheck gave up waiting.</b>
<br></br>Tor Circuit: $tor_circuit_established_word
<br></br>Bootstrapping $tor_bootstrap_percent % done. Tor reports: $tor_bootstrap_status
<br></br>Time synchronization status: $time_synchronization_status_word</p>

<p>Possible issues:
<br></br>- Is the host's internet connection working?
<br></br>- Whonix-Gateway will need a few moments for bootstrapping the Tor network.
<br></br>- Do you live in a censored area?
$anondate_issue</p>

<p>Recommendations:</p>

$anondate_recommendation

<p>1)
<br></br>Shut down Whonix and try to get the Tor Browser Bundle from <a href=https://www.torproject.org>https://www.torproject.org</a>
working on your host. If you cannot get the Tor Browser Bundle to work, you will most certainly not get Whonix to work either.</p>

<p>The Tor Browser Bundle is great for testing if you live in a censored area. If you need bridges for the Tor Browser Bundle,
you will need them for Whonix as well.</p>

<p>2)
<br></br>Try again: $start_menu_instructions_system_first_part Whonix Check
<br></br>or in Terminal: <code>whonixcheck</code>
<br></br>or in Terminal with debugging: <code>whonixcheck --debug --verbose</code></p>

<p>3)
<br></br>Use arm, connection page two, to see if Tor is connected:
<blockquote>$start_menu_instructions_system_first_part Arm</blockquote>
or in Terminal: <code>arm</code></p>
$anondate_debugging_information"
   elif [ "$VM" = "Whonix-Workstation" ]; then
      local MSG="<p>Tor Bootstrap Result:
<br></br>Whonixcheck gave up waiting.
<br></br>Tor Circuit: $tor_circuit_established_word
<br></br>Time synchronization status: $time_synchronization_status_word</p>

<p>Possible issues:
<br></br>- Is the host's internet connection working?
<br></br>- Whonix-Gateway will need a few moments for bootstrapping the Tor network.
<br></br>- Did you start Whonix-Gateway beforehand?</p>

<p>Recommendations:</p>

<p>1)
<br></br>Try again: $start_menu_instructions_system_first_part Whonix Check
<br></br>           or in Terminal: <code>whonixcheck</code>
<br></br>           or in Terminal with debugging: <code>whonixcheck --debug --verbose</code></p>

<p>2)
<br></br>Run whonixcheck on Whonix-Gateway as well.</p>"
   else
      local MSG="$FUNCNAME: This is neither Whonix-Gateway nor Whonix-Workstation. Please report this Whonix bug!"
   fi

   if [ "$started_tor_bootstrap_progress_bar" = "1" ]; then
      $output_x ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
   fi
   $output_x ${output_opts[@]} --messagex --typex "error" --message "$MSG"
   $output_cli ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
   EXIT_CODE="1"
   ## TODO
   #cleanup "1"
   ## `break` check_tor_bootstrap loop.
   return 1
}

check_tor_bootstrap_script_error() {
   error_handler "<p>(Tor Bootstrap Result:)
<br></br>(Technical information:)
<br></br>(tor_bootstrap_percent: $tor_bootstrap_percent)
<br></br>(tor_circuit_established: $tor_circuit_established)
<br></br>(tor_circuit_established_word: $tor_circuit_established_word)
<br></br>(tor_bootstrap_timeout_type: $tor_bootstrap_timeout_type)
<br></br>(tor_bootstrap_status: $tor_bootstrap_status)
<br></br>(check_socks_port_open_test: $check_socks_port_open_test)
<br></br>(TOR_BOOTSTRAP_TIME_PASSED: $TOR_BOOTSTRAP_TIME_PASSED)
<br></br>(whonixcheck_tor_bootstrap_wait_max: $whonixcheck_tor_bootstrap_wait_max)</p>"

   ## `break` check_tor_bootstrap loop.
   return 1
}
