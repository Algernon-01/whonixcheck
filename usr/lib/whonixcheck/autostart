#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_autostart() {
   trap "error_handler" ERR

   ## This script gets run by:
   ## - /etc/profile.d/
   ## - /etc/xdg/autostart/whonixcheck.desktop
   ## - /etc/cron.d/

   ## If it was not autostarted the user is free to re-run the checks.
   if [ "$manualrun" = "1" ]; then
      return 0
   fi

   ## Random delay, unless started with --sleepseconds, which is the default.
   ## --sleepseconds is only a debugging option.
   if [ "$SLEEP_SECONDS" = "" ]; then
      ## To prevent issuing leaving a clear network fingerprint,
      ## we add a random delay.

      ## Random delay between 0 and 500 seconds.
      local DELAY
      DELAY="$(( 100+($(od -An -N2 -i /dev/random) )%(300-0+1) ))"

      ## 60 seconds minimum delay.
      DELAY="$(( $DELAY + 60 ))"

      ## For debugging.
      #DELAY="10"
   else
      DELAY="$SLEEP_SECONDS"
   fi

   if [ "$NOCHECKLASTRUN" = "1" ]; then
      RECENTLY_RUN="0"
   fi

   if [ "$RECENTLY_RUN" = "0" ]; then
      if [ "$NOSLEEP" = "1" ]; then
         return 0
      else
         if [ "$NEVER_RUN" = "1" ]; then
            local temp="First run of $SCRIPTNAME. Running $SCRIPTNAME in $DELAY seconds (randomly chosen)..."
         else
            local temp="$SCRIPTNAME has not been completed for more than one day. Running $SCRIPTNAME again in $DELAY seconds (randomly chosen)..."
         fi

         local MSG="\
$temp

The delay is a security feature, which is documented here:
https://www.whonix.org/wiki/whonixcheck

You can also cancel waiting and manually start $SCRIPTNAME right away."

         $output ${output_opts[@]} --waitmessagecli --typecli "info" --titlecli "$TITLE" --message "$MSG" --done

         local MSG="\
$temp

The delay is a security feature, which is documented here:
https://www.whonix.org/wiki/whonixcheck

You can also cancel waiting and start whonixcheck right away by double clicking on the whonixcheck icon or
entering \"whonixcheck\" in a terminal emulator (such as Konsole).

$NOTIFY_MSG"

         local tmp
         tmp="$(mktemp)"
         local progressbaridx
         progressbaridx="${tmp##*.}"

         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressbarx --titlex "$TITLE" --message "$MSG" --done

         local wait
         wait="0"

         ## Debugging.
         #DELAY=30

         while true; do
            if [ "$wait" -ge "$DELAY" ]; then
               break
            fi
            wait="$(( $wait + 1))"

            if [ "$waitprogress" = "" ]; then
               waitprogress="0"
            fi
            waitprogress="$(( $waitprogress + 1 ))"
            if [ "$waitprogress" -ge "100" ]; then
               waitprogress="0"
            fi

            $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "$waitprogress"

            sleep ".500" &
            lastpid="$!"
            wait "$lastpid" || true
         done

         $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"

         return 0
      fi
   else
      ## The check_whonixcheck_lastrun function told us, that whonixcheck has
      ## recently completed (using the
      ## "/var/lib/whonixcheck/"$SCRIPTNAME"_lastrun" status file),
      ## create the recently_run status file.
      sudo -u user touch "/var/run/whonixcheck/"$SCRIPTNAME"_recently_run"

      ## If it was run in daemon mode and there is nothing to tell, say nothing,
      ## only send a debug message, if debugging is enabled.
      if [ "$DAEMON" = "1" ]; then
         local MSG="$SCRIPTNAME started in daemon mode. $SCRIPTNAME checks completed $DIFFERENCE seconds ago. No need to run again."

         ## Debugging.
         #$output ${output_opts[@]} --passivepopupqueuex --typex "info" --titlex "$TITLE" --message "$MSG" --done
         ## --done not necessary, the cleanup function will do that.
         #$output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

         EXIT_CODE="0"
         cleanup "1"
         return 0
      else
         ## Autostarted...
         ## (Not manualrun, we checked that at the top already.)

         local MSG="No need to run $SCRIPTNAME, was run less than one day ago. You could still start $SCRIPTNAME manually."
         $output ${output_opts[@]} --passivepopupqueuex --typex "info" --titlex "$TITLE" --message "$MSG" --done

         ## --done not necessary, the cleanup function will do that.
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

         EXIT_CODE="0"
         cleanup "1"
         return 0
      fi
   fi
}
