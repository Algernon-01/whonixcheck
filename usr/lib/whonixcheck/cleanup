#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## {{ maybe_kill_apt_get_update
##
## apt-get-update runs as root (using a /etc/sudoers.d/ exception) while
## whonixcheck runs as user. Therefore we can't kill apt-get-update using
## process_killer_helper. (Can't kill processes owned by other users.)
## In case apt-get-update is still running, we need to start
## apt-get-update-kill-helper as root (again using a /etc/sudoers.d/
## exception). This might look like a lot effort for little gain, but when
## the user terminated whonixcheck, apt-get is still running and the user wants
## to manually use apt-get, it would show an error because the apt-get lockfile
## would still exist.
maybe_kill_apt_get_update() {
   if [ "$apt_get_update_pid" = "" ]; then
      ## Pid never set. Either the check_operating_system check has been disabled,
      ## or signal received earlier or this isn't whonixcheck. Either way.
      ## Nothing to do.
      return 0
   fi

   ## Can not use `kill`, must use `ps`, because kill will always return a
   ## a non-zero return code if the process is owned by a different user.
   local ps_p_exit_code
   ps_p_exit_code="0"
   ps -p "$apt_get_update_pid" >/dev/null 2>/dev/null || { ps_p_exit_code="$?" ; true; };

   if [ ! "$ps_p_exit_code" = "0" ]; then
      ## apt-get-update already terminated, nothing to do.
      return 0
   fi
   ## apt-get-update still running.

   if [ ! -x "/usr/lib/anon-shared-helper-scripts/apt-get-update-kill-helper" ]; then
      error "/usr/lib/anon-shared-helper-scripts/apt-get-update-kill-helper is not executable."
   fi

   ## There is an exception in /etc/sudoers.d/.
   ## "|| true", to avoid an error when whonixcheck receives a sigterm signal
   ## while running this command (such as when whonixcheckd gets stopped).
   sudo "/usr/lib/anon-shared-helper-scripts/apt-get-update-kill-helper" "$apt_get_update_pid" || true
}
## }}

## {{ ex_funct

## This function gets called by trap_sigterm (ex: zenity cancel button),
## trap_sigint (ex: ctrl + c) and error_handler.

ex_funct() {
   trap "error_handler" ERR

   ## Deactivate traps, so when pressing ctrl + c several times this won't
   ## create an endless loop.
   trap - SIGTERM
   trap - SIGINT

   maybe_kill_apt_get_update

   ## kill $lastpid (if running)
   process_killer_helper

   lastpid="$tail_pid"
   ## kill $lastpid (if running)
   process_killer_helper

   rm --force "/var/run/whonixcheck/${IDENTIFIER}_running"
   rm --force "/var/run/whonixcheck/${IDENTIFIER}_waiting"
   #rm --force "/var/run/whonixcheck/${IDENTIFIER}_pid"

   ## Check if $output command has been already defined. This is not the case,
   ## when the script is terminated very early.
   local command_v_output_exit_code
   command_v_output_exit_code="0"
   command -v "$output" >/dev/null || { command_v_output_exit_code="$?" ; true; };
   if [ "$command_v_output_exit_code" = "0" ]; then
      $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"
      $output ${output_opts[@]} --progressbaridx "$progressbaridx" --progressx "100"
      $output ${output_opts[@]} --messagex --done
      $output ${output_opts[@]} --messagecli --done
   fi
   exit 0
}

## }}

trap_sigterm() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGTERM received. Cleaning up... Exiting..."
   ex_funct
}

trap "trap_sigterm" SIGTERM

trap_sigint() {
   trap "error_handler" ERR

   echo "$SCRIPTNAME: SIGTERM received. Cleaning up... Exiting..."
   ex_funct
}

trap "trap_sigint" SIGINT

cleanup() {
   trap "error_handler" ERR

   true "cleanup function..."

   $output ${output_opts[@]} --progressbaridx "$progressbaridx_main" --progressx "100"

   rm --force "/var/run/whonixcheck/${IDENTIFIER}_running"
   rm --force "/var/run/whonixcheck/${IDENTIFIER}_waiting"

   touch "/var/run/whonixcheck/${IDENTIFIER}_done"

   sync

   ## The "Please feel free to press <enter> to return back to your normal prompt."
   ## message is not necessary when manually started.
   if [ ! "$manualrun" = "1" ]; then
      ## Not manually started.

      local output_status_exit_code
      output_status_exit_code="0"
      $output ${output_opts[@]} --identifier whonixcheck --status --messagecli || { output_status_exit_code="$?" ; true; };

      if [ "$output_status_exit_code" = "0" ]; then
         ## We have messages to show.
         ## Add press enter to return back to your normal prompt message below.
         local MSG="<p>Please feel free to press <enter> to return back to your normal prompt.</p>"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      elif [ "$output_status_exit_code" = "1" ]; then
         true "No messages for --messagecli in the queue. Not adding press enter to return back to your normal prompt message below."
      else
         local MSG="$output returned $output_status_exit_code. Please report this Whonix bug!"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      fi
   fi

   $output ${output_opts[@]} --messagex --done
   $output ${output_opts[@]} --messagecli --done

   cd ..

   ## default exit code
   if [ "$EXIT_CODE" = "" ]; then
      EXIT_CODE="0"
   fi

   if [ "$1" = "1" ]; then
      true "END"
      exit "$EXIT_CODE"
   fi
}
