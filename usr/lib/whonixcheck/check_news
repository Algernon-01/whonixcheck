#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Whonix News Download: Checking for Whonix news and updates..."
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

   mkdir --parents "$VERIFY_TEMPDIR/news"

   declare -A -g whonix_news_web_link_list
   declare -A -g whonix_news_download_exit_code
   declare -A -g whonix_news_verify_check_gpg_exit_code

   ## whonix_news_web_link_list[web_link]="filename"
   whonix_news_web_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v4/whonix_news.tar.xz.asc/download]="whonix_news.tar.xz.asc"
   whonix_news_web_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v4/whonix_news.tar.xz/download]="whonix_news.tar.xz"

   ## sf.net does not support ssl.
   ## --location is required since sf.net uses redirects to mirrors.

   local web_link

   for web_link in "${!whonix_news_web_link_list[@]}"; do
      local filename
      filename="${whonix_news_web_link_list[$web_link]}"

      true "web_link: $web_link"
      true "filename: $filename"

      whonix_news_download_exit_code[$web_link]="0"

      $CURL \
         $CURL_VERBOSE \
         --fail \
         --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
         --location \
         --max-time 180 \
         --output "$VERIFY_TEMPDIR/news/$filename" \
         "$web_link" \
         &

      lastpid="$!"
      wait "$lastpid" || { whonix_news_download_exit_code[$web_link]="$?" ; true; };

      if [ ! "${whonix_news_download_exit_code[$web_link]}" = "0" ]; then
         local curl_status_message
         curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "${whonix_news_download_exit_code[$web_link]}")"
         local MSG="<p>Whonix News Result: <b>Could not download Whonix News File</b> "$filename". (curl exit code: $curl_status_message)</p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

   done

   whonixcheck_run_function verify_whonix_news

   if [ ! "$whonix_news_verified_ok" = "true" ]; then
      true "$BASH_SOURCE WARNING: whonix_news_verified_ok is not true, it is $whonix_news_verified_ok, return"
      return 0
   fi

   whonixcheck_run_function extract_whonix_news

   if [ ! "$whonix_news_tar_exit_code" = "0" ]; then
      true "$BASH_SOURCE ERROR: whonix_news_tar_exit_code is not 0, it is $whonix_news_tar_exit_code, return"
      return 0
   fi

   whonixcheck_run_function check_whonix_debian_version
   whonixcheck_run_function check_whonix_build_version
   whonixcheck_run_function check_whonix_debian_news
   whonixcheck_run_function check_whonix_build_news
   whonixcheck_run_function check_whonix_blog
}

verify_whonix_news() {
   trap "error_handler" ERR

   ## Sanity tests.
   command -v date >/dev/null
   command -v gpg >/dev/null

   ## Fallback
   whonix_news_verified_ok="false"

   local whonix_news_gpg_temp_dir
   whonix_news_gpg_temp_dir="$VERIFY_TEMPDIR/news_gpg"

   rm --recursive --force "$whonix_news_gpg_temp_dir"
   mkdir --parents "$whonix_news_gpg_temp_dir"
   chmod --recursive 700 "$whonix_news_gpg_temp_dir"

   whonix_news_verify_general_exit_code="0"

   true "a whonix_news_verify_general_exit_code: $whonix_news_verify_general_exit_code"

   gpg \
      --no-options \
      --homedir "$whonix_news_gpg_temp_dir" \
      --fingerprint \
      >/dev/null 2>/dev/null \
      || { whonix_news_verify_general_exit_code="$?" ; true; };

   true "b whonix_news_verify_general_exit_code: $whonix_news_verify_general_exit_code"

   local key

   shopt -s nullglob dotglob

   for key in "/usr/share/whonix/whonix-news-keys.d/"*; do
      local key_filename
      key_filename="$(basename "$key")"
      if [ "$key_filename" = "placeholder" ]; then
         continue
      fi
      gpg \
         --no-options \
         --homedir "$whonix_news_gpg_temp_dir" \
         --import "$key" \
         2>/dev/null \
         || { whonix_news_verify_general_exit_code="$?" ; true; };
      if [ ! "$whonix_news_verify_general_exit_code" = "0" ]; then
         break
      fi
   done

   shopt -u nullglob dotglob

   true "c whonix_news_verify_general_exit_code: $whonix_news_verify_general_exit_code"

   if [ ! "$whonix_news_verify_general_exit_code" = "0" ]; then
      whonix_news_verified_ok="false"
      local MSG="<p>Whonix News Download Result: <b>General Whonix News OpenPGP Verification Error.</b>
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   whonix_news_verify_check_gpg_exit_code="0"

   true "d whonix_news_verify_check_gpg_exit_code: ${whonix_news_verify_check_gpg_exit_code}"

   local filename signature timeout_after kill_after gpg_fd_one gpg_fd_one_file
   filename="whonix_news.tar.xz"
   signature="whonix_news.tar.xz.asc"

   timeout_after="10"
   kill_after="10"

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   gpg_fd_one_file="$VERIFY_TEMPDIR/news_gpg_fd_one"
   rm --force "$gpg_fd_one_file"

   timeout --kill-after="$kill_after" "$timeout_after" \
         gpg \
            --no-options \
            --status-file "$gpg_fd_one_file" \
            --homedir "$whonix_news_gpg_temp_dir" \
            --verify "$VERIFY_TEMPDIR/news/$signature" \
            >/dev/null \
            2>/dev/null \
            &

   lastpid="$!"
   wait "$lastpid" || { whonix_news_verify_check_gpg_exit_code="$?" ; true; }

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   if [ -f "$gpg_fd_one_file" ]; then
      gpg_fd_one="$(cat "$gpg_fd_one_file")"
   fi

   ## Example gpg_fd_one:
   ## [GNUPG:] SIG_ID ckz4Z2Th1KU9o1sVsWMY8JXdg+A 2013-10-13 1381635738
   ## [GNUPG:] GOODSIG 9C131AD3713AAEEF adrelanos <adrelanos@riseup.net>
   ## [GNUPG:] VALIDSIG 9B157153925C303A42253AFB9C131AD3713AAEEF 2013-10-13 1381635738 0 4 0 1 10 00 9B157153925C303A42253AFB9C131AD3713AAEEF
   ## [GNUPG:] TRUST_UNDEFINED

   ## Another example gpg_fd_one:
   ## [GNUPG:] ERRSIG 9C131AD3713AAEEF 1 10 00 1381635738 9
   ## [GNUPG:] NO_PUBKEY 9C131AD3713AAEEF

   true "e whonix_news_verify_check_gpg_exit_code: ${whonix_news_verify_check_gpg_exit_code}"

   ## Quote Werner Koch [1]:
   ## "there is no clear distinction between the codes and for proper error
   ## reporting you are advised to use the --status-fd messages."
   ## [1] http://lists.gnupg.org/pipermail/gnupg-devel/2005-December/022559.html
   #if [ ! "${whonix_news_verify_check_gpg_exit_code}" = "0" ]; then
      #true
   #fi

   local line validsig signed_on_unixtime
   ## Fallback.
   validsig="false"

   OIFS="$IFS"
   IFS="
"

   for line in $gpg_fd_one; do
      IFS="$OIFS"
      true "line: $line"
      local one two three four five
      read -r one two three four five _ <<< "$line"
      true "one: $one | two: $two | three: $three | four: $four | five: $five"
      if [ "$two" = "VALIDSIG" ]; then
         validsig="true"
         signed_on_unixtime="$five"
      fi
   done

   ## Fallback, in case $gpg_fd_one is empty.
   IFS="$OIFS"

   if [ ! "$validsig" = "true" ]; then
      whonix_news_verified_ok="false"
      local MSG="<p>Whonix News Download Result:<br></br><b>Could not OpenPGP verify authenticity of Whonix News </b>$filename!!!
<br></br>(gpg return code: ${whonix_news_verify_check_gpg_exit_code} | validsig: $validsig)
This is either a Whonix Bug or an attack on Whonix!!!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   if [ "$signed_on_unixtime" = "" ]; then
      whonix_news_verified_ok="false"
      whonix_news_verify_check_gpg_exit_code="1000"
      local MSG="<p>Whonix News Check: <br></br><b>variable signed_on_unixtime is empty.<br></br></b>
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/054
   if [[ "$signed_on_unixtime" != *[!0-9]* ]]; then
      true "'$signed_on_unixtime' is strictly numeric."
   else
      whonix_news_verified_ok="false"
      whonix_news_verify_check_gpg_exit_code="2000"
      local MSG="<p>Whonix News Check: <br></br><b>Variable signed_on_unixtime includes a non-digit:</b> $signed_on_unixtime
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local current_unixtime
   current_unixtime="$(date +%s)"
   local current_time
   current_time="$(date)"

   true "signed_on_unixtime: $signed_on_unixtime"
   true "current_unixtime: $current_unixtime"

   local difference_in_seconds
   difference_in_seconds="$(( $current_unixtime - $signed_on_unixtime ))"
   local difference_in_minutes
   difference_in_minutes="$(( $difference_in_seconds / 60 ))"

   ## One month has 2592000 seconds.
   ## (60 [seconds] * 60 [minutes] * 24 [hours] * 30 [days])
   local month_has_seconds
   month_has_seconds="2592000"

   local maximum_age_in_seconds
   maximum_age_in_seconds="$month_has_seconds"

   if [ "$current_unixtime" -le "$signed_on_unixtime" ]; then
      whonix_news_verified_ok="false"
      whonix_news_verify_check_gpg_exit_code="3000"
      local MSG="<p>Whonix News Check: <br></br><b>Your clock is slow.</b> According to your system,
Whonix News File was signed $difference_in_minutes minutes before current time.
<br></br>Please run Timesync: <blockquote>Start menu -> Applications -> System -> Whonix Timesync</blockquote>
or in Terminal: <code>timesync</code></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local in_future_in_seconds
   in_future_in_seconds="$(( $difference_in_seconds - $maximum_age_in_seconds ))"
   local in_future_in_minutes
   in_future_in_minutes="$(( $in_future_in_seconds / 60 ))"

   if [ "$difference_in_seconds" -ge "$maximum_age_in_seconds" ]; then
      whonix_news_verified_ok="false"
      whonix_news_verify_check_gpg_exit_code="4000"
      local MSG="<p>Whonix News Check: <b>Whonix News File is no longer valid (outdated).</b>
<br></br>Either,
<br></br>- your clock is fast (at least $in_future_in_minutes minutes fast)
<br></br>  In that case, please run Timesync: Start menu -> Applications -> System -> Whonix Timesync
<br></br>                     or in Terminal: timesync
<br></br>- it has been forgotten to refresh Whonix's News File (invalid since $in_future_in_minutes minutes)
<br></br>- this is a Whonix Bug
<br></br>- or this is an attack on Whonix</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   whonix_news_verified_ok="true"
   local MSG="Whonix News Check: news file valid."
   if [ "$verbose" = "1" ]; then
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   fi
}

extract_whonix_news() {
   trap "error_handler" ERR

   local filename timeout_after kill_after
   filename="whonix_news.tar.xz"

   timeout_after="10"
   kill_after="10"

   ## Debugging.
   #timeout_after="0.001"
   #kill_after="0.001"

   whonix_news_tar_exit_code="0"

   timeout --kill-after="$kill_after" "$timeout_after" \
      tar \
         --extract \
         --verbose \
         --xz \
         --file="$VERIFY_TEMPDIR/news/$filename" \
         --directory="$VERIFY_TEMPDIR/news/" \
         . \
         >/dev/null \
         &

   lastpid="$!"
   wait "$lastpid" || { whonix_news_tar_exit_code="$?" ; true; }

   ## `timeout` returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   if [ ! "$whonix_news_tar_exit_code" = "0" ]; then
      local MSG="<p>Whonix News Download Result: <b>Could not extract $filename!</b? (tar return code: ${whonix_news_tar_exit_code})
<br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Debugging.
   #ls -la "$VERIFY_TEMPDIR/news/"
}

check_whonix_debian_version() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_deb_versions"

   if [ ! -f "$filename" ]; then
      ## This file should always exist.
      local MSG="<p>Whonix News Check: <b>File $filename does not exist.</b><br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local outdated_deb
   outdated_deb="1"

   while read -r LINE; do
      #true "$i: $LINE"
      if [ "$whonix_deb_package_version" = "$LINE" ]; then
         outdated_deb="0"
      fi
   done < "$filename"

   if [ "$outdated_deb" = "0" ]; then
      ## Up to date...
      local MSG="<p>Whonix News Download Result: Installed Whonix Debian Package $whonix_deb_package_version is up to date.</p>"
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="<p>Whonix News Download Result: <b>Installed Whonix Debian Package $whonix_deb_package_version is outdated!</b>
<br></br>You should update. You can automatically update using Whonix's internal updater. Please update using:
<blockquote><code>sudo apt-get update && sudo apt-get dist-upgrade</code></blockquote></p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_version() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_build_versions"

   if [ ! -f "$filename" ]; then
      ## This file should always exist.
      local MSG="<p>Whonix News Check: <b>File $filename does not exist.</b><br></br>Please report this bug!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local outdated_build
   outdated_build="1"

   while read -r LINE; do
      #true "$i: $LINE"
      if [ "$whonix_build_version" = "$LINE" ]; then
         outdated_build="0"
      fi
   done < "$filename"

   if [ "$outdated_build" = "0" ]; then
      ## Up to date...
      local MSG="<p>Whonix News Download Result: Installed Whonix Build $whonix_build_version is up to date.</p>"
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="<p>Whonix News Download Result: <b>Whonix Build $whonix_build_version is outdated!</b>
<br></br>You should update. Sorry, automatically updating this Whonix version is not possible. You have to manually download a new Whonix image.</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
   fi
}

check_whonix_debian_news() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_deb_package_version}_deb_news"

   if [ ! -f "$filename" ]; then
      ## This will happen:
      ## - when using custom git tags / versions
      ## - when no news file has been uploaded yet
      local MSG="<p>Whonix News Download Result: There is no news file available for Whonix Debian Version ${whonix_deb_package_version} yet.</p>"
   else
      local MSG
      MSG="$(cat "$filename")"

      if [ "$MSG" = "" ]; then
         return 0
      fi
   fi

   $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
}

check_whonix_build_news() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_build_version}_build_news"

   if [ ! -f "$filename" ]; then
      ## This will happen:
      ## - when using custom git tags / versions
      ## - when no news file has been uploaded yet
      local MSG="<p>Whonix News Download Result: There is no news file available for Whonix Build Version ${whonix_build_version} yet.</p>"
   else
      local MSG
      MSG="$(cat "$filename")"

      if [ "$MSG" = "" ]; then
         return 0
      fi
   fi

   $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
}

check_whonix_blog() {
   trap "error_handler" ERR

   BLOG_SUCCESS="0"

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_important_blog.txt"

   if [ ! -f "$filename" ]; then
      local MSG="<p>Whonix Blog Download Result: $filename does not exist.</p>"
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      cp "$filename" "/var/lib/whonix/whonixblog/important_blog.txt"

      BLOG_SUCCESS="$(( $BLOG_SUCCESS + 1 ))"
   fi

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_feature_blog.txt"

   if [ ! -f "$filename" ]; then
      local MSG="<p>Whonix Blog Download Result: $filename does not exist.</p>"
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      cp "$filename" "/var/lib/whonix/whonixblog/feature_blog.txt"
      BLOG_SUCCESS="$(( $BLOG_SUCCESS + 1 ))"
   fi

   ## Let's make just one success message, not two.
   if [ "$BLOG_SUCCESS" = "2" ]; then
      local MSG="<p>Whonix Blog Download Result: Success.</p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      fi
      return 0
   fi
}
