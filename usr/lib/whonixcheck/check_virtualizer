#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_virtualizer() {
   trap "error_handler" ERR

   ## This has a sudoers exception in /etc/sudoers.d/virt-what.
   local result
   result="$(sudo virt-what)"

   if [ "$result" = "" ]; then
      ## Not running in a Virtual Machine (or none detected).
      local MSG="<p>Check Virtualizer Result: No Virtualizer detected, probably running on <u>bare metal</u>, continuing.</p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   if [ "$result" = "virtualbox" ]; then
      local MSG="<p>Check Virtualizer Result: Supported Virtualizer <u>VirtualBox</u> detected, continuing.
<br></br>virt-what result: <code>$result</code></p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   if [ "$result" = "kvm" ]; then
      local MSG="<p>Check Virtualizer Result: Supported Virtualizer <u>KVM</u> detected, continuing.
<br></br>virt-what result: <code>$result</code></p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   local virt_what_result_expected_qubes
   virt_what_result_expected_qubes="hyperv
xen"

   if [ "$result" = "$virt_what_result_expected_qubes" ]; then
      local MSG="<p>Check Virtualizer Result: Supported Virtualizer <u>Qubes</u> detected, continuing.
<br></br>virt-what result: <code>$result</code></p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
      return 0
   fi

   ## Neither Physical Isolation nor supported virtualizer was detected.

   if [ "$WHONIXCHECK_NO_EXIT_ON_UNSUPPORTED_VIRTUALIZER" = "1" ]; then
      local MSG="<p>Check Virtualizer Result: Unsupported Virtualizer <code>$result</code> detected, but <code>WHONIXCHECK_NO_EXIT_ON_UNSUPPORTED_VIRTUALIZER</code> is set, continuing.</p>"
      if [ "$verbose" = "1" ]; then
         $output ${output_opts[@]} --messagex --typex "info" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
   else
      if [ "$result" = "vmware" ]; then
         local VMWARE_TEXT="<p>VMware [6] is closed source, therefore security through obscurity [7].</p>"
         local WIKI_LINK="[6] <a href=https://en.wikipedia.org/wiki/Security_through_obscurity>https://en.wikipedia.org/wiki/Security_through_obscurity</a>"
         local VMWARE_LINK="[7] <a href=https://www.whonix.org/wiki/VMware>https://www.whonix.org/wiki/VMware</a>"
      else
         local VMWARE_TEXT=""
         local VMWARE_LINK=""
      fi

      local MSG="\
<p>Virtualizer <code>$result</code> unsupported by Whonix developers! Whonixcheck aborted!<p>

<p>Using Virtualizer <code>$result</code> together with Whonix is recommended against, because it is rarely tested. [1] [2] [3] \
<br></br>It could be made possible, but would require more Whonix contributors.
<br></br>It may already work, but is highly experimental.</p>

$VMWARE_TEXT

<p>This might endanger your anonymity. Do not proceed unless you know what you are doing.</p>

<p>If you wish to ignore this warning and to continue whonixcheck anyway, you can set
<code><blockquote>    WHONIXCHECK_NO_EXIT_ON_UNSUPPORTED_VIRTUALIZER=\"1\"</blockquote></code>
in <code>/etc/whonix.d/30_whonixcheck_default</code>.</p>

<p>Recommended action:
<br></br>- Shut down.
<br></br>- Read Whonix documentation [4].
<br></br>- Use Whonix with either VirtualBox or Physical Isolation [5].</p>

<p>Footnotes:</p>

<p>[1] <a href=https://www.whonix.org/wiki/LeakTests>https://www.whonix.org/wiki/LeakTests</a>
<br></br>[2] <a href=https://www.whonix.org/wiki/Test>https://www.whonix.org/wiki/Test</a>
<br></br>[3] <a href=https://www.whonix.org/wiki/Protocol-Leak-Protection_and_Fingerprinting-Protection>https://www.whonix.org/wiki/Protocol-Leak-Protection_and_Fingerprinting-Protection</a>
<br></br>[4] <a href=https://www.whonix.org/wiki/Documentation>https://www.whonix.org/wiki/Documentation</a>
<br></br>[5] <a href=https://www.whonix.org/wiki/Physical_Isolation>https://www.whonix.org/wiki/Physical_Isolation</a>
<br></br>$VMWARE_LINK
<br></br>$WIKI_LINK</p>
"

      $output ${output_opts[@]} --messagex --typex "error" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --message "$MSG"
      EXIT_CODE="1"
      cleanup "1"
      return 0
   fi
}
