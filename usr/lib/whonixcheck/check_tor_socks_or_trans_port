#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

check_tor_socks_or_trans_port() {
   trap "error_handler" ERR

   ## debugging hints
   #CURL=echo
   #TEMP_DIR=/home/user

   local LINK="https://check.torproject.org"

   if [ "$1" = "SocksPort" ]; then
      if [ "$WHONIXCHECK_DISABLE_SOCKS_PORT_TEST" = "1" ]; then
         local MSG="<p>SocksPort Test: Not testing Tor's SocksPort, because you set <code>WHONIXCHECK_DISABLE_SOCKS_PORT_TEST=\"1\"</code> to deactivate this.</p>"
         $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

      local MSG="SocksPort Test: Testing Tor's SocksPort..."
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

      local SOCKS_PORT_WHONIXCHECK="9110"

      CHECK_TOR_RESULT_SOCKS_PORT="0"

      CHECK_TOR_OUT_FILE="check_tpo_tor_socksport.html"

      ## Ensuring normal curl activity can not be linked to whonixcheck,
      ## by using a SocksPort, which is solely used by whonixcheck.
      $CURL \
         --fail \
         $CURL_VERBOSE \
         --socks5-hostname "socks5h://$GATEWAY_IP:$SOCKS_PORT_WHONIXCHECK/" \
         --tlsv1 \
         --proto =https \
         --max-time 180 \
         --output "$TEMP_DIR/$CHECK_TOR_OUT_FILE" \
         "$LINK" \
         &

      lastpid="$!"
      wait "$lastpid" || { CHECK_TOR_RESULT_SOCKS_PORT="$?" ; true; };

      if [ ! "$CHECK_TOR_RESULT_SOCKS_PORT" = "0" ]; then
         local curl_status_message
         curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$CHECK_TOR_RESULT_SOCKS_PORT")"
         if [ "$VM" = "Whonix-Gateway" ]; then

            local MSG="\
<p>SocksPort Test Result: <a href=https://check.torproject.org>https://check.torproject.org</a> was not reachable. (curl exit code: $curl_status_message)
<br></br>You could check, if you can reach <a href=https://check.torproject.org>https://check.torproject.org</a> via the Tor Browser Bundle.<p>"

         elif [ "$VM" = "Whonix-Workstation" ]; then
            local curl_status_message
            curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$CHECK_TOR_RESULT_SOCKS_PORT")"
            local MSG="\
<p>SocksPort Test Result: <a href=https://check.torproject.org>https://check.torproject.org</a> was not reachable. (curl exit code: $curl_status_message)
<br></br>You could check, if you can reach <a href=https://check.torproject.org>https://check.torproject.org</a> via the Tor Browser Bundle.</p>"

         else

            local MSG="$FUNCNAME: <p>This is neither Whonix-Gateway nor Whonix-Workstation. Please report this bug!</p>"

         fi

         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"

         return 0
      fi
   elif [ "$1" = "TransPort" ]; then
      if [ "$WHONIXCHECK_DISABLE_TRANS_PORT_TEST" = "1" ]; then
         local MSG="<p>TransPort Test: <b>Not testing Tor's TransPort, because you set <code>WHONIXCHECK_DISABLE_TRANS_PORT_TEST=\"1\"</code> to deactivate this.</b></p>"
         $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

      ## Do not test for stream isolation if Tor detection failed.
      ## This variable may be set to 1, during the first run of this function.
      if [ "$NOT_USING_TOR" = "1" ]; then
         local MSG="<p><b>TransPort Test: Not testing Tor's TransPort, because Tor could not be detected on Tor's SocksPort.</b></p>"
         $output ${output_opts[@]} --messagecli --typecli "info" --titlex "$TITLE" --message "$MSG"
         return 0
      fi

      if [ ! "$CHECK_TOR_RESULT_SOCKS_PORT" = "0" ]; then
         local MSG="<p><b>TransPort Test: Not checking Tor's TransPort, because SocksPort test failed already.</b></p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

      local MSG="TransPort Test: Testing Tor's TransPort..."
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

      CHECK_TOR_RESULT_TRANS_PORT="0"

      CHECK_TOR_OUT_FILE="check_tpo_tor_transport.html"

      ## For production:
      $CURL \
         --fail \
         $CURL_VERBOSE \
         --tlsv1 \
         --proto =https \
         --max-time 180 \
         --output "$TEMP_DIR/$CHECK_TOR_OUT_FILE" \
         "$LINK" &

      lastpid="$!"
      wait "$lastpid" || { CHECK_TOR_RESULT_TRANS_PORT="$?" ; true; };

      if [ ! "$CHECK_TOR_RESULT_TRANS_PORT" = "0" ]; then
         local curl_status_message
         curl_status_message="$(/usr/lib/curl-scripts/curl_exit_codes "$CHECK_TOR_RESULT_TRANS_PORT")"
         local MSG="<p>TransPort Test Result: <b>Tor's TransPort was not reachable. (curl exit code:</b> $curl_status_message)
<br></br>(If you disabled Tor's TransPort, please disable this check, see whonixcheck /etc/whonix.d/30_whonixcheck_default configuration file.)</p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi
   else
      local MSG="<p>Trans/Socks-Port Test Error: <b>\$1 is neither TransPort nor SocksPort.</b> Please report this Whonix BUG!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## grep exit codes:
   ## 0 found
   ## 1 otherwise
   ## 2 if an error occurred

   local tor_detected
   tor_detected="0"
   local grep_congratulations_result
   grep_congratulations_result="$(grep --no-messages "Congratulations" "$TEMP_DIR/$CHECK_TOR_OUT_FILE")" || { tor_detected="$?" ; true; }

   ## Example grep_congratulations_result:
   ## <img alt="Congratulations. Your browser is configured to use Tor." src="/images/tor-on.png">
   ## Congratulations. Your browser is configured to use Tor.<br>

   ## Handling cases where grep exit codes greater than 1 and less than 0.
   if [ "$tor_detected" -gt "1" ] || [ "$tor_detected" -lt "0" ]; then
      ## an error occurred
      local MSG="<p><b>tor_detected is $tor_detected</b>. Please report this Whonix BUG!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local grep_ip_exit_code
   grep_ip_exit_code="0"
   local ip
   ip="$(grep --no-messages "IP" "$TEMP_DIR/$CHECK_TOR_OUT_FILE")" || { grep_ip_exit_code="$?" ; true; }

   ## example ip:
   ## Your IP address appears to be: <b>94.242.204.74</b><br>

   ## Handling cases where grep exit codes greater than 1 and less than 0.
   if [ "$grep_ip_exit_code" -gt "1" ] || [ "$grep_ip_exit_code" -lt "0" ]; then
      ## an error occurred
      local MSG="<p><b>grep_ip_exit_code: $grep_ip_exit_code.</b> Please report this Whonix BUG!</p>"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Test excessive string length.
   #ip="Your IP address appears to be: <b>2001:0db8:85a3:0042:1000:8a2e:0370:7334 \$f(do) \`this\` ... xxx ... xxx </b><br>"

   if [ ! "$grep_ip_exit_code" = "0" ]; then
      ## grep exit code: non-zero
      ip="IP not detected (2). Please report this bug!"
   else
      ## grep exit code: 0
      ip="$(/usr/lib/msgcollector/striphtml "$ip")"
      ip="$(echo "$ip" | sed 's/Your IP address appears to be://g')"
      ip="$(echo "$ip" | sed 's/ //g')"

      ## An IPv6 IP is 39 characters long. Add a few for more for the "[ ]" and...?
      max_string_length="50"
      actual_string_length="${#ip}"
      local ip_excess_length
      ip_excess_length=""

      if [ "$actual_string_length" -gt "$max_string_length" ]; then
         ## Store excess length for later use.
         ip_excess_length="$ip"

         ## Shorten excess length $ip to $max_string_length chars.
         ip="${ip:0:$max_string_length}"

         local MSG="<p><b>$1 Test: Excessive string length of IP variable</b> ($actual_string_length characters).
         Could be a Whonix bug, check.torproject.org bug or compromise. Please report this to Whonix developers!</p>"
         $output ${output_opts[@]} --messagex --typex "warning" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "warning" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

      ## Store IP for later use in memory.
      if [ "$1" = "TransPort" ]; then
         IP_TRANS_PORT="$ip"
      elif [ "$1" = "SocksPort" ]; then
         IP_SOCKS_PORT="$ip"
      fi
   fi

   ## Check if connected to Tor or not,
   ## and choose which message to show.
   if [ "$tor_detected" = "0" ]; then
      ## Tor detected.
      if [ "$1" = "TransPort" ]; then
         local MSG="<p>TransPort Test Result: Connected to Tor. IP: $ip</p>"
      elif [ "$1" = "SocksPort" ]; then
         local MSG="<p>SocksPort Test Result: Connected to Tor. IP: $ip</p>"
      fi
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      return 0
   else
      ## Tor not detected.
      NOT_USING_TOR="1"

      if [ "$1" = "TransPort" ]; then
         if [ "$WHONIXCHECK_NO_EXIT_ON_TRANS_PORT_DETECTION_FAILURE" = "1" ]; then
            local MSG="<p>TransPort Test Result: Tor not detected, but you set <code>WHONIXCHECK_NO_EXIT_ON_TRANS_PORT_DETECTION_FAILURE=\"1\"</code> to ignore this. IP: $ip</p>"
            $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
            $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
            return 0
         else
            local MSG="\
<p>TransPort Test Result:
<br></br><b>Looks like you are not connected through Tor!</b>
<br></br>IP: $ip</p>

<p>Whonixcheck aborted!</p>

<p>Possible reasons:
<br></br>- There could be something wrong.
<br></br>- You added a VPN.
<br></br>- You added a transproxy.
<br></br>- It's a false positive. <a href=https://check.torproject.org>https://check.torproject.org</a> fails in some cases to detect exit nodes.</p>

<p>(
<br></br> VPN/transproxy users:
<br></br> In case you added a VPN/transproxy and do not want whonixcheck to stop once this has been detected, see whonixcheck /etc/whonix.d/30_whonixcheck_default configuration file.
<br></br>)</p>

<p>You could try to find out if this IP is/was a Tor exit node using a search engine or ExoneraTor:
<br></br><a href=https://metrics.torproject.org/exonerator.html>https://metrics.torproject.org/exonerator.html</a></p>"

            $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
            $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
            EXIT_CODE="1"
            cleanup "1"
            return 0
         fi
      elif [ "$1" = "SocksPort" ]; then
         local MSG="\
<p>SocksPort Test Result:
<br></br>Tor's SocksPort: <b>Looks like you are not connected through Tor!</b>
<br></br>IP: $ip</p>

<p>Whonixcheck aborted!</p>

<p>Possible reasons:
<br></br>- There could be something wrong.
<br></br>- It's a false positive. <a href=https://check.torproject.org>https://check.torproject.org</a> fails in some cases to detect exit nodes.</p>

<p>You could try to find out if this IP is/was a Tor exit node using a search engine or ExoneraTor:
<br></br><a href=https://metrics.torproject.org/exonerator.html>https://metrics.torproject.org/exonerator.html</a></p>"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         EXIT_CODE="1"
         cleanup "1"
         return 0
      fi
   fi

}

check_tor_socks_port() {
   trap "error_handler" ERR

   check_tor_socks_or_trans_port "SocksPort"
}

check_tor_trans_port() {
   trap "error_handler" ERR

   check_tor_socks_or_trans_port "TransPort"
}
