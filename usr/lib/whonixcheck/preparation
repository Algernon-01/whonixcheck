#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

if_you_know_what_you_are_doing_funct() {
   ## $1 - $FUNCNAME
   echo "\
If you know what you are doing, feel free to disable this check.
Create a file <code>/etc/whonix.d/50_whonixcheck_user</code> and add:
<code><blockquote>whonixcheck_skip_functions+=\" $1 \"</blockquote></code>"
}

whonixcheck_msgdispatcher_windows_existing() {
   local msgdispatcher_dispatch_x_pids pid args cmd
   local first second third fourth
   cmd="pgrep -f msgdispatcher_dispatch_x"
   msgdispatcher_dispatch_x_pids="$($cmd)" || return 0
   for pid in $msgdispatcher_dispatch_x_pids; do
      args="$(ps ww --no-header -p "$pid" -o 'args')" || return 0
      ## Example args:
      ## /usr/bin/python /usr/lib/msgcollector/msgdispatcher_dispatch_x info whonixcheck | Whonix-Workstation | Template-Based AppVM | Sat Aug 15 02:08:03 UTC 2015 <p><span style=color:#008000>INFO</span>: <b>whonixcheck aborted!</b> (SIGNAL_TYPE: SIGINT)</p> 1 /usr/share/icons/anon-icon-pack/whonix.ico
      read -r first second third fourth _ <<< "$args"
      if [ "/usr/lib/msgcollector/msgdispatcher_dispatch_x" = "$second" ]; then
         if [ "whonixcheck" = "$fourth" ]; then
            echo "A whonixcheck result window is already open." >&2
            echo "$first $second still running." >&2
            echo "cmd: $cmd" >&2
            echo "msgdispatcher_dispatch_x_pids: $msgdispatcher_dispatch_x_pids" >&2
            echo "pid: $pid" >&2
            echo "args: $args" >&2
            echo "Exiting." >&2
            EXIT_CODE="125"
            cleanup
         fi
      fi
   done
}

whonixcheck_run_function() {
   case $whonixcheck_skip_functions in
   *"${1+"$@"}"*) echo "INFO: Skipping ${1+"$@"}, because whonixcheck_skip_functions includes it."
                  return 0
                  ;;
   esac

   true "INFO: Running ${1+"$@"}, because whonixcheck_skip_functions does not include it."
   eval ${1+"$@"}
}

get_local_whonix_version() {
   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      whonix_deb_package_name="whonix-gateway-packages-dependencies"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      whonix_deb_package_name="whonix-workstation-packages-dependencies"
   fi

   ## fallback
   whonix_deb_package_version="Could not detect Whonix debian version. (Code: 1) Please report this bug!"

   local dpkg_query_exit_code
   dpkg_query_exit_code="0"
   whonix_deb_package_version="$(dpkg-query --show --showformat='${Version}' "$whonix_deb_package_name" 2>/dev/null)" || { dpkg_query_exit_code="$?" ; true; };

   if [ ! "$dpkg_query_exit_code" = "0" ]; then
      whonix_deb_package_version="Could not detect Whonix $whonix_deb_package_name version. (Code: 2) Probably because package $whonix_deb_package_name is not installed."
   fi

   ## Example: whonix_deb_package_version="2:6-debpackage1"

   ## Remove epoch from whonix_deb_package_version.
   whonix_deb_package_version="$(echo "$whonix_deb_package_version" | awk -F ":" '{ print $2 }')"

   ## Example: whonix_deb_package_version="6-debpackage1"

   ## fallback
   if [ "$whonix_deb_package_version" = "" ]; then
      whonix_deb_package_version="Could not detect Whonix $whonix_deb_package_name version. (Code: 2) Please report this bug!"
   fi

   ## fallback
   whonix_build_version="Could not read Whonix Build Version File. (Code: 3) Please report this bug!"

   local build_version_file
   if [ -f "/usr/share/whonix/build_version" ]; then
      build_version_file="/usr/share/whonix/build_version"
   elif [ -f "/var/lib/anon-dist/build_version" ]; then
      build_version_file="/var/lib/anon-dist/build_version"
   fi

   if [ "$build_version_file" = "" ]; then
      whonix_build_version="There is no Whonix Build Version File. (Code: 4) Please report this bug!"
   else
      if [ -f "$build_version_file" ]; then
         whonix_build_version="$(cat "$build_version_file")"
      fi
   fi

   ## fallback
   if [ "$whonix_build_version" = "" ]; then
      whonix_build_version="Could not read Whonix Build Version File. (Code: 5) Please report this bug!"
   fi
}

preparation() {
   msgdispatcher_init

   [ -n "$verbose" ] || verbose="0"

   if [ "$AUTOSTARTED" = "1" ] || [ "$DAEMON" = "1" ]; then
      whonixcheck_run_function msgdispatcher_wait
      whonixcheck_run_function whonixcheck_msgdispatcher_windows_existing
   fi

   if [ -e "/var/run/whonixcheck/${IDENTIFIER}_pid" ]; then
      local oldpid
      ## || true to prevent a race condition with whonixcheckd's init script
      oldpid="$(cat "/var/run/whonixcheck/${IDENTIFIER}_pid")" || true
      if [ ! "$oldpid" = "" ]; then
         if [ "$AUTOSTARTED" = "1" ] || [ "$DAEMON" = "1" ]; then
            if kill -0 "$oldpid" >/dev/null 2>/dev/null ; then
               echo "Already running." >&2
               echo "AUTOSTARTED: $AUTOSTARTED" >&2
               echo "DAEMON: $DAEMON" >&2
               echo "oldpid: $oldpid" >&2
               echo "Not killing existing one." >&2
               echo "Exiting." >&2
               EXIT_CODE="124"
               cleanup
            fi
         fi
         ## $lastpid is used by by process_killer_helper.
         lastpid="$oldpid"
         process_killer_helper
         unset lastpid
      fi
   fi

   rm --force "/var/run/whonixcheck/${IDENTIFIER}_done"
   rm --force "/var/run/whonixcheck/${IDENTIFIER}_recently_run"
   sudo -u user touch "/var/run/whonixcheck/${IDENTIFIER}_running"
   echo "$$" | sudo -u user tee "/var/run/whonixcheck/${IDENTIFIER}_pid" > /dev/null

   sync

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   user_name="user"
   WHONIX_HOMEPAGE="https://www.whonix.org"
   TEMP_DIR="$(mktemp --directory)"
   export TEMP_DIR

   ## returns: whonix_deb_package_version
   get_local_whonix_version

   ## Prepare temporary directory.
   chmod 700 "$TEMP_DIR"

   if command -v qubesdb-read >/dev/null 2>&1 ; then
      qubes_detected="true"
   else
      qubes_detected="false"
   fi

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      VM="Whonix-Gateway"
      vm_lower_case_short="gateway"
      GATEWAY_IP="127.0.0.1"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      VM="Whonix-Workstation"
      vm_lower_case_short="workstation"
      if [ "$qubes_detected" = "true" ]; then
         ## Would fail if netvm is set to 'none'.
         GATEWAY_IP="$(qubesdb-read /qubes-gateway)" || GATEWAY_IP="qubesdb_read_failed"
      else
         GATEWAY_IP="10.152.152.10"
      fi
   else
      VM="whonixcheck script could not determine if this is whonix_gateway or whonix_workstation. Please report this bug."
      vm_lower_case_short="error"
      if [ "$qubes_detected" = "true" ]; then
         GATEWAY_IP="$(qubesdb-read /qubes-gateway)" || GATEWAY_IP="qubesdb_read_failed"
      else
         GATEWAY_IP="10.152.152.10"
      fi
   fi

   if [ -f "/etc/apt/sources.list.d/whonix.list" ]; then
      ## Fallback
      whonix_codename="unknown"

      local i
      while read -r i; do
         local first second third fourth
         read -r first second third fourth _ <<< "$i"
         if [ "$first" = "deb" ]; then
            whonix_codename="$third"
            break
         fi
      done < "/etc/apt/sources.list.d/whonix.list"

   else
      whonix_codename="No"
   fi

   whonix_codename_uppercase="${whonix_codename^^}"

   if [ "$DAEMON" = "1" ]; then
      true
   elif [ "$AUTOSTARTED" = "1" ]; then
      true
   else
      manualrun="1"
   fi

   ## ARCH="x86_64"
   ## ARCH="i686"
   ARCH="$(uname --machine)"

   if [ "$qubes_detected" = "true" ]; then
      ## Overwrite with || true to prevent failing just because of this.
      ## '/name' outputs for example:
      ## sys-whonix
      ## whonix
      qubes_name_of_vm="$(qubesdb-read /name)" || true
      start_menu_instructions_system_first_part="dom0 -> Start Menu -> Template: <code>$qubes_name_of_vm</code> ->"
      ## '/qubes-vm-type' is either 'AppVM', 'ProxyVM', 'NetVM' or 'TemplateVM'
      qubes_vm_type="$(qubesdb-read /qubes-vm-type)" || true
      ## '/qubes-vm-persistence' outputs:
      ## - 'full' (TemplateVM or Standalone),
      ## - 'rw-only' (TemplateBasedVM), or
      ## - 'none' (DispVM).
      qubes_vm_persistence="$(qubesdb-read /qubes-vm-persistence)" || true
      ## '/qubes-base-template outputs for example:
      ## whonix-gw
      ## whonix-ws
      qubes_base_template="$(qubesdb-read /qubes-base-template)" || true
      if [ "$qubes_vm_type" = "TemplateVM" ]; then
         qubes_title_extra=" | TemplateVM"
         update_where="this TemplateVM ('<code>$qubes_name_of_vm</code>')"
         persistent_changes_start_menu_instructions_first_part="dom0 -> Start Menu -> Template: <code>$qubes_name_of_vm</code> ->"
         GATEWAY_IP="$(qubesdb-read /qubes-gateway)" || GATEWAY_IP="qubesdb_read_failed"
      else
         if [ "$qubes_vm_persistence" = "full" ]; then
            qubes_title_extra=" | Standalone $qubes_vm_type"
            update_where="this StandaloneVM ('<code>$qubes_name_of_vm</code>')"
            persistent_changes_start_menu_instructions_first_part="dom0 -> Start Menu -> Template: <code>$qubes_name_of_vm</code> ->"
         elif [ "$qubes_vm_persistence" = "rw-only" ]; then
            qubes_title_extra=" | $qubes_base_template Template-Based $qubes_vm_type"
            update_where="your '<code>$qubes_base_template</code>' TemplateVM"
            persistent_changes_start_menu_instructions_first_part="dom0 -> Start Menu -> Template: <code>$qubes_base_template</code> ->"
         elif [ "$qubes_vm_persistence" = "none" ]; then
            qubes_title_extra=" | $qubes_base_template DispVM $qubes_vm_type"
            update_where="your '<code>$qubes_base_template</code>' TemplateVM"
            persistent_changes_start_menu_instructions_first_part="dom0 -> Start Menu -> Template: <code>$qubes_base_template</code> ->"
         else
            qubes_title_extra=" | Unknown Qubes VM Type"
            update_where="<?> your '<code>$qubes_base_template</code>' TemplateVM </?>"
            persistent_changes_start_menu_instructions_first_part="dom0 -> Start Menu -> Template: <code>$qubes_base_template</code> ->"
         fi
      fi
      if [ "$AUTOSTARTED" = "1" ] || [ "$DAEMON" = "1" ]; then
         [ -n "$silent" ] || silent="3"
         if [ "$vm_lower_case_short" = "workstation" ]; then
            local MSG="\
Qubes detected. Workstation detected.
AUTOSTARTED: $AUTOSTARTED
DAEMON: $DAEMON
whonixcheck_exit_immediate: $whonixcheck_exit_immediate"
            if [ "$verbose" -ge "3" ]; then
               $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
            fi
            if [ "$whonixcheck_exit_immediate" = "" ]; then
               local MSG="whonixcheck_exit_immediate was unset, setting to 'true'."
               if [ "$verbose" -ge "3" ]; then
                  $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
               fi
               whonixcheck_exit_immediate="true"
            fi
         fi
      fi
   else
      start_menu_instructions_system_first_part="Start Menu -> Applications -> System ->"
      qubes_title_extra=""
      update_where="this machine"
   fi

   [ -n "$silent" ] || silent="0"

   if [ "$whonixcheck_exit_immediate" = "true" ]; then
      echo "whonixcheck_exit_immediate is $whonixcheck_exit_immediate. Exiting." >&2
      EXIT_CODE="123"
      cleanup
   fi

   TITLE_X="$IDENTIFIER | ${VM}${qubes_title_extra} | $(date)"

   ## No need to add $IDENTIFIER to output, because msgcollector already does that.
   ## $qubes_name_of_vm is empty in non-Qubes-Whonix.
   TITLE_CLI="$qubes_name_of_vm | ${VM}${qubes_title_extra} | $(date)"

   ## https://www.whonix.org/wiki/Whonixcheck#SSL_Certificate_Pinning
   TPO_PIN_CERT_FILE="/usr/share/torbrowser-launcher/torproject.pem"
   CURL_TPO_PIN_CERT="--cacert $TPO_PIN_CERT_FILE"

   who_ami="$(whoami)"

   $output_general --icon "$ICON"
   $output_general --parenttty "$my_tty"
   $output_general --whoami "$who_ami"
   $output_x --titlex "$TITLE_X"
   $output_cli --titlecli "$TITLE_CLI"

   ## Only for whonixcheck to make it distinct from timesync.
   ## Preventing overlapping windows.
   $output_general --lefttop

   if [ "$verbose" -ge "1" ] || [ "$qubes_detected" = "true" ]; then
      local MSG="$TITLE_CLI"
      if [ "$manualrun" = "1" ]; then
         $output_cli ${output_opts[@]} --messagecli --typecli "info" --message "$MSG"
      fi
   fi

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         bash -n "$i"
         source "$i"
      fi
   done

   TIME_START="$(date +%s)"

   whonixcheck_run_function root_check ## root_check
   whonixcheck_run_function uwt_tool ## help_uwt_tool
   whonixcheck_run_function pin_tpo_ssl_cert ## pin_ssl_cert
}
