#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

output_func() {
   trap "error_handler" ERR

   if [ "$output_func_verbose" = "true" ]; then
      echo "Running: bash -x $output_tool --identifier $IDENTIFIER --whoami $who_ami ${1+$@}"
      bash -x $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" ${1+"$@"}
   else
      $output_tool --identifier "$IDENTIFIER" --whoami "$who_ami" ${1+"$@"}
   fi
   true
}

whonixcheck_run_function() {
   trap "error_handler" ERR

   case $whonixcheck_skip_functions in
   *"${1+"$@"}"*) echo "INFO: Skipping ${1+"$@"}, because whonixcheck_skip_functions includes it."
                  return 0
                  ;;
   esac

   true "INFO: Running ${1+"$@"}, because whonixcheck_skip_functions does not include it."
   eval ${1+"$@"}
}

get_local_whonix_version() {
   trap "error_handler" ERR

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      whonix_deb_package_name="whonix-gateway-packages-dependencies"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      whonix_deb_package_name="whonix-workstation-packages-dependencies"
   fi

   ## fallback
   whonix_deb_package_version="Could not detect Whonix debian version. (Code: 1) Please report this bug!"

   local dpkg_query_exit_code
   dpkg_query_exit_code="0"
   whonix_deb_package_version="$(dpkg-query --show --showformat='${Version}' "$whonix_deb_package_name")" || { dpkg_query_exit_code="$?" ; true; };

   if [ ! "$dpkg_query_exit_code" = "0" ]; then
      whonix_deb_package_version="Could not detect Whonix $whonix_deb_package_name version. (Code: 2) Probably because package $whonix_deb_package_name is not installed."
   fi

   ## Example: whonix_deb_package_version="2:6-debpackage1"

   ## Remove epoch from whonix_deb_package_version.
   whonix_deb_package_version="$(echo "$whonix_deb_package_version" | awk -F ":" '{ print $2 }')"

   ## Example: whonix_deb_package_version="6-debpackage1"

   ## fallback
   if [ "$whonix_deb_package_version" = "" ]; then
      whonix_deb_package_version="Could not detect Whonix $whonix_deb_package_name version. (Code: 2) Please report this bug!"
   fi

   ## fallback
   whonix_build_version="Could not read Whonix Build Version File. (Code: 3) Please report this bug!"

   local build_version_file
   if [ -f "/usr/share/whonix/build_version" ]; then
      build_version_file="/usr/share/whonix/build_version"
   elif [ -f "/var/lib/anon-dist/build_version" ]; then
      build_version_file="/var/lib/anon-dist/build_version"
   fi

   if [ "$build_version_file" = "" ]; then
      whonix_build_version="There is no Whonix Build Version File. (Code: 4) Please report this bug!"
   else
      if [ -f "$build_version_file" ]; then
         whonix_build_version="$(cat "$build_version_file")"
      fi
   fi

   ## fallback
   if [ "$whonix_build_version" = "" ]; then
      whonix_build_version="Could not read Whonix Build Version File. (Code: 5) Please report this bug!"
   fi
}

preparation() {
   trap "error_handler" ERR

   if [ -e "/var/run/whonixcheck/${IDENTIFIER}_pid" ]; then
      local oldpid
      ## || true to prevent a race condition with whonixcheckd's init script
      oldpid="$(cat "/var/run/whonixcheck/${IDENTIFIER}_pid")" || true
      if [ ! "$oldpid" = "" ]; then
         ## $lastpid is used by by process_killer_helper.
         lastpid="$oldpid"
         process_killer_helper
         unset lastpid
      fi
   fi

   rm --force "/var/run/whonixcheck/${IDENTIFIER}_done"
   rm --force "/var/run/whonixcheck/${IDENTIFIER}_recently_run"
   sudo -u user touch "/var/run/whonixcheck/${IDENTIFIER}_running"
   echo "$$" | sudo -u user tee "/var/run/whonixcheck/${IDENTIFIER}_pid" > /dev/null

   sync

   if [ "$display" = "" ]; then
      if [ "$DISPLAY" = "" ]; then
         display=":0"
      else
         display="$DISPLAY"
      fi
   fi

   local my_tty
   local my_tty_exit_code
   my_tty_exit_code="0"
   my_tty="$(tty)" || { my_tty_exit_code="$?" ; true; };

   if [ ! "$my_tty_exit_code" = "0" ]; then
      my_tty="none"
   fi

   ## Just in case.
   if [ "$my_tty" = "" ]; then
      my_tty="none"
   fi

   user_name="user"
   WHONIX_HOMEPAGE="https://www.whonix.org"
   TEMP_DIR="$(mktemp --directory)"
   export TEMP_DIR

   ## returns: whonix_deb_package_version
   get_local_whonix_version

   ## Prepare temporary directory.
   chmod 700 "$TEMP_DIR"

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      VM="Whonix-Gateway"
      vm_lower_case_short="gateway"
      GATEWAY_IP="127.0.0.1"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      VM="Whonix-Workstation"
      vm_lower_case_short="workstation"
      GATEWAY_IP="10.152.152.10"
   else
      VM="whonixcheck script could not determine if this is whonix_gateway or whonix_workstation. Please report this bug."
      vm_lower_case_short="error"
      GATEWAY_IP="10.152.152.10"
   fi

   if [ -f "/etc/apt/sources.list.d/whonix.list" ]; then
      ## Fallback
      whonix_codename="unknown"

      local i
      while read -r i; do
         local first second third fourth
         read -r first second third fourth _ <<< "$i"
         if [ "$first" = "deb" ]; then
            whonix_codename="$third"
            break
         fi
      done < "/etc/apt/sources.list.d/whonix.list"

   else
      whonix_codename="No"
   fi

   whonix_codename_uppercase="${whonix_codename^^}"

   if [ "$DAEMON" = "1" ]; then
      true
   elif [ "$AUTOSTARTED" = "1" ]; then
      true
   else
      manualrun="1"
   fi

   ## ARCH="x86_64"
   ## ARCH="i686"
   ARCH="$(uname --machine)"

   TITLE="$IDENTIFIER | $VM | $whonix_deb_package_version | $(date)"

   ## https://www.whonix.org/wiki/Whonixcheck#SSL_Certificate_Pinning
   TPO_PIN_CERT_FILE="/usr/share/torbrowser-launcher/torproject.pem"
   CURL_TPO_PIN_CERT="--cacert $TPO_PIN_CERT_FILE"

   output_tool="/usr/lib/msgcollector/msgcollector"
   output="output_func"

   who_ami="$(whoami)"

   $output --icon "$ICON"
   $output --parenttty "$my_tty"
   $output --whoami "$who_ami"
   $output --titlex "$TITLE"
   $output --titlecli "$TITLE"

   ## Only for whonixcheck to make it distinct from timesync.
   ## Preventing overlapping windows.
   $output --lefttop

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         bash -n "$i"
         source "$i"
      fi
   done

   TIME_START="$(date +%s)"
}
