#! /bin/bash
### BEGIN INIT INFO
# Provides:          whonixcheckd
# Required-Start:    $remote_fs $syslog $all
# Required-Stop:     $remote_fs $syslog
# Should-Start:      rinetd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Whonix Check Autostart
# Description:       Checks many important aspects
#                    of Whonix.
### END INIT INFO

# Author: Patrick Schleizer <adrelanos@riseup.net>

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

# Do NOT "set -e"

#set -x

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="whonixcheck"
NAME=whonixcheck
DAEMON=/usr/lib/whonixcheckdaemon
#DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER_NAME=user

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

mkdir -p /var/run/whonixcheck/
chown --recursive user:user /var/run/whonixcheck/
chmod --recursive o+w /var/run/whonixcheck/
chmod --recursive g+w /var/run/whonixcheck/

mkdir -p /var/lib/whonixcheck/
chown --recursive user:user /var/lib/whonixcheck/
chmod --recursive o+w /var/run/whonixcheck/
chmod --recursive g+w /var/run/whonixcheck/

mkdir -p /var/lib/whonix/whonixblog/
chown --recursive user:user /var/lib/whonix/whonixblog/
chmod --recursive o+w /var/lib/whonix/whonixblog/
chmod --recursive g+w /var/lib/whonix/whonixblog/

#
# Function that starts the daemon/service
#
do_start()
{
   start-stop-daemon \
      --start \
      --pidfile "$PIDFILE" \
      --make-pidfile \
      --background \
      --chuid $USER_NAME:$USER_NAME \
      --exec $DAEMON --
   ret="$?"

   return "$ret"
}

#
# Function that stops the daemon/service
#
do_stop()
{
   start-stop-daemon \
      --stop \
      --quiet \
      --pidfile "$PIDFILE" \
      --signal TERM \
      --retry 5 \
      2> /dev/null

   ret="$?"

   return "$ret"
}

do_status()
{
   if [ -f /var/run/whonixcheck/whonixcheck_done ]; then
      return 0
   else
      return 1
   fi
}

case "$1" in
  start)
	log_daemon_msg "Starting $NAME"
	do_start
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $NAME"
	do_stop
	case "$?" in
		0|1) log_end_msg 0 ;;
		2) log_end_msg 1 ;;
	esac
	;;
  status)
	do_status || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
